// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: scripts/iop.proto

package scripts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IOPClient is the client API for IOP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IOPClient interface {
	GetPermittedNetworkInfo(ctx context.Context, in *PermittedNetworkAddress, opts ...grpc.CallOption) (IOP_GetPermittedNetworkInfoClient, error)
	InvokePermittedMethod(ctx context.Context, in *MethodInfo, opts ...grpc.CallOption) (*MethodResponse, error)
	GetPermittedMethodsList(ctx context.Context, in *PermittedNetworkId, opts ...grpc.CallOption) (IOP_GetPermittedMethodsListClient, error)
}

type iOPClient struct {
	cc grpc.ClientConnInterface
}

func NewIOPClient(cc grpc.ClientConnInterface) IOPClient {
	return &iOPClient{cc}
}

func (c *iOPClient) GetPermittedNetworkInfo(ctx context.Context, in *PermittedNetworkAddress, opts ...grpc.CallOption) (IOP_GetPermittedNetworkInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &IOP_ServiceDesc.Streams[0], "/IOP/getPermittedNetworkInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &iOPGetPermittedNetworkInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IOP_GetPermittedNetworkInfoClient interface {
	Recv() (*PermittedNetworkInfo, error)
	grpc.ClientStream
}

type iOPGetPermittedNetworkInfoClient struct {
	grpc.ClientStream
}

func (x *iOPGetPermittedNetworkInfoClient) Recv() (*PermittedNetworkInfo, error) {
	m := new(PermittedNetworkInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iOPClient) InvokePermittedMethod(ctx context.Context, in *MethodInfo, opts ...grpc.CallOption) (*MethodResponse, error) {
	out := new(MethodResponse)
	err := c.cc.Invoke(ctx, "/IOP/InvokePermittedMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOPClient) GetPermittedMethodsList(ctx context.Context, in *PermittedNetworkId, opts ...grpc.CallOption) (IOP_GetPermittedMethodsListClient, error) {
	stream, err := c.cc.NewStream(ctx, &IOP_ServiceDesc.Streams[1], "/IOP/getPermittedMethodsList", opts...)
	if err != nil {
		return nil, err
	}
	x := &iOPGetPermittedMethodsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IOP_GetPermittedMethodsListClient interface {
	Recv() (*MethodInfo, error)
	grpc.ClientStream
}

type iOPGetPermittedMethodsListClient struct {
	grpc.ClientStream
}

func (x *iOPGetPermittedMethodsListClient) Recv() (*MethodInfo, error) {
	m := new(MethodInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IOPServer is the server API for IOP service.
// All implementations must embed UnimplementedIOPServer
// for forward compatibility
type IOPServer interface {
	GetPermittedNetworkInfo(*PermittedNetworkAddress, IOP_GetPermittedNetworkInfoServer) error
	InvokePermittedMethod(context.Context, *MethodInfo) (*MethodResponse, error)
	GetPermittedMethodsList(*PermittedNetworkId, IOP_GetPermittedMethodsListServer) error
	mustEmbedUnimplementedIOPServer()
}

// UnimplementedIOPServer must be embedded to have forward compatible implementations.
type UnimplementedIOPServer struct {
}

func (UnimplementedIOPServer) GetPermittedNetworkInfo(*PermittedNetworkAddress, IOP_GetPermittedNetworkInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPermittedNetworkInfo not implemented")
}
func (UnimplementedIOPServer) InvokePermittedMethod(context.Context, *MethodInfo) (*MethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokePermittedMethod not implemented")
}
func (UnimplementedIOPServer) GetPermittedMethodsList(*PermittedNetworkId, IOP_GetPermittedMethodsListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPermittedMethodsList not implemented")
}
func (UnimplementedIOPServer) mustEmbedUnimplementedIOPServer() {}

// UnsafeIOPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IOPServer will
// result in compilation errors.
type UnsafeIOPServer interface {
	mustEmbedUnimplementedIOPServer()
}

func RegisterIOPServer(s grpc.ServiceRegistrar, srv IOPServer) {
	s.RegisterService(&IOP_ServiceDesc, srv)
}

func _IOP_GetPermittedNetworkInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PermittedNetworkAddress)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IOPServer).GetPermittedNetworkInfo(m, &iOPGetPermittedNetworkInfoServer{stream})
}

type IOP_GetPermittedNetworkInfoServer interface {
	Send(*PermittedNetworkInfo) error
	grpc.ServerStream
}

type iOPGetPermittedNetworkInfoServer struct {
	grpc.ServerStream
}

func (x *iOPGetPermittedNetworkInfoServer) Send(m *PermittedNetworkInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _IOP_InvokePermittedMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MethodInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOPServer).InvokePermittedMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOP/InvokePermittedMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOPServer).InvokePermittedMethod(ctx, req.(*MethodInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOP_GetPermittedMethodsList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PermittedNetworkId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IOPServer).GetPermittedMethodsList(m, &iOPGetPermittedMethodsListServer{stream})
}

type IOP_GetPermittedMethodsListServer interface {
	Send(*MethodInfo) error
	grpc.ServerStream
}

type iOPGetPermittedMethodsListServer struct {
	grpc.ServerStream
}

func (x *iOPGetPermittedMethodsListServer) Send(m *MethodInfo) error {
	return x.ServerStream.SendMsg(m)
}

// IOP_ServiceDesc is the grpc.ServiceDesc for IOP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IOP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IOP",
	HandlerType: (*IOPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvokePermittedMethod",
			Handler:    _IOP_InvokePermittedMethod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getPermittedNetworkInfo",
			Handler:       _IOP_GetPermittedNetworkInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getPermittedMethodsList",
			Handler:       _IOP_GetPermittedMethodsList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scripts/iop.proto",
}
